# -*- coding: utf-8 -*-
"""Stock Market Regime Detection S&P 500

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zjNFSlmxPQgcOWtwkANo1ggCrBlT2EZb

Importing required libraries
"""

!pip install hmmlearn

import numpy as np
import pandas as pd
from hmmlearn.hmm import GaussianHMM
import plotly.graph_objects as go
from plotly.graph_objs.scatter.marker import Line
from plotly.subplots import make_subplots
import plotly.express as px
import math

import warnings

warnings.filterwarnings('ignore')

"""Uploading Dataset

"""

df1 = pd.read_csv('/content/drive/MyDrive/Capstone/Data/^GSPC.csv')
df1.head()

df1.describe()

df1.dtypes

df1.isnull().sum()

"""No null values.

Selecting only 'Date' and 'Adj Close' columns.
"""

stocks = df1[['Date', 'Adj Close']]
stocks = stocks.set_index('Date')
stocks.head()

trading_instrument = "Adj Close"

df2 = pd.read_csv('/content/drive/MyDrive/Capstone/Data/^IXIC.csv')
stocks_nasdaq = df2[['Date', 'Adj Close']]
stocks_nasdaq = stocks_nasdaq.set_index('Date')
stocks_nasdaq.head()

stocks.columns.name = trading_instrument 
px.line(stocks['Adj Close'])

"""We can see the 2007-2009 fianancial crisis, COVID crash in 2020, and the 2022 recession period.

The function named prepare_data_for_model_input returns a dataframe with close price, moving average price, and its log returns.
"""

def prepare_data_for_model_input(prices, ma):
    '''
        Input:
        prices (df) - Dataframe of close prices
        ma (int) - legth of the moveing average
        
        Output:
        prices(df) - An enhanced prices dataframe, with moving averages and log return columns
        prices_array(nd.array) - an array of log returns
    '''
    
    instrument = 'Adj Close' 
    stocks[f'{instrument}_ma'] = prices.rolling(ma).mean()
    stocks[f'{instrument}_log_return'] = np.log(prices[f'{instrument}_ma']/prices[f'{instrument}_ma'].shift(1)).dropna()
 
    prices.dropna(inplace = True)
    prices_array = np.array([[q] for q in stocks[f'{instrument}_log_return'].values])
    
    return prices, prices_array

stocks1, prices_array = prepare_data_for_model_input(stocks, 7)
stocks1.head()

prices_array

# Create a line graph of the Adj Close Log Return
fig = px.line(stocks, x=stocks.index, y='Adj Close_log_return', title='Adj Close Log Return vs. Date')

# Show the graph
fig.show()

"""No. of negative values in log returns column"""

class RegimeDetection:
  def get_regimes_hmm(self, input_data, params):
    hmm_model = self.initialise_model(GaussianHMM(), params).fit(input_data)
    return hmm_model

  def initialise_model(self, model, params):
    for parameter, value in params.items():
      setattr(model, parameter, value)
    return model

import datetime
def plot_hidden_states(hidden_states, prices_df):
    
    '''
    Input:
    hidden_states(numpy.ndarray) - array of predicted hidden states
    prices_df(df) - dataframe of close prices
    
    Output:
    Graph showing hidden states and prices
    
    '''
    
    colors = ['blue', 'green']
    n_components = len(np.unique(hidden_states))
    fig = go.Figure()



    for i in range(n_components):
        mask = hidden_states == i
        print('Number of observations for State ', i,":", len(prices_df.index[mask]))
        
        fig.add_trace(go.Scatter(x=prices_df.index[mask], y=prices_df[f"{prices_df.columns.name}"][mask],
                    mode='markers',  name='Hidden State ' + str(i), marker=dict(size=4,color=colors[i])))
        
    fig.update_layout(height=400, width=900,legend=dict(
            yanchor="top", y=0.99, xanchor="left",x=0.01), margin=dict(l=20, r=20, t=20, b=20)).show()

regime_detection = RegimeDetection()

params = {'n_components':2, 'covariance_type':"full", 'random_state':100}

 

hmm_model = regime_detection.get_regimes_hmm(prices_array, params)

hmm_states = hmm_model.predict(prices_array)

plot_hidden_states(np.array(hmm_states), stocks[[f'{trading_instrument}']])